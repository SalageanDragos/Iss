package com.example.accessingdatamysql;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@CrossOrigin
@RestController // This means that this class is a Controller
@RequestMapping(path="/demo") // This means URL's start with /demo (after Application path)
public class UserController {
    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserModel userRepository;
    /**
     * @param id
     * @return
     */
    @GetMapping(path="/getuser")
    public Optional<User> getUser(@RequestParam Integer id) {
        // TODO implement here

        return userRepository.findById(id);
    }

    /**
     * @param user
     * @param id
     * @param password
     * @return
     */
    @PostMapping(path="/updateuser")
    public String updateUser(@RequestParam Integer user, @RequestParam Integer id, @RequestParam String password) {
        // TODO implement here
        //User n = userRepository.findById(id);
        //n.setPassword(password);
        //userRepository.save(n);
        return "Saved";
    }

    /**
     * @param user
     * @param id
     */
    @DeleteMapping(path="/deleteuser")
    public void deleteUser(@RequestParam Integer user, Integer id) {
        // TODO implement here
        userRepository.deleteById(id);
    }

    /**
     * @param user
     * @param username
     * @param password
     * @param email
     */
    @PostMapping(path="/adduser") // Map ONLY POST Requests
    public @ResponseBody String addUser (@RequestParam Integer user,@RequestParam String username,@RequestParam String password,@RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setUsername(username);
        n.setEmail(email);
        n.setPassword(password);
        userRepository.save(n);
        return "Saved";
    }
    @CrossOrigin
    @GetMapping(path="/allusers")
    public @ResponseBody Iterable<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userRepository.findAll();
    }
}